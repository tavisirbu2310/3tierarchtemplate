AWSTemplateFormatVersion: 2010-09-09

Description: >
  This template creates the Web/FE tier resources for a 3 tier architecture using CloudFormation.

Parameters:
  VpcId:
    Type: String
  WebSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  BackendALBDNS:
    Type: String
    Default: "your-backend-alb-dns-here"

Resources:
  # Web Tier Resources
  WebALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS inbound traffic for the web server"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  WebEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS inbound traffic for the web server"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref WebALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "Production-WebLaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref WebEC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl enable httpd
            systemctl start httpd
            echo "<h1>Welcome to Octavian's demo web server!</h1>" > /var/www/html/index.html
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${BackendALBDNS}/api/message)
            DB_RESULT=$(curl -s http://${BackendALBDNS}/api/message)
            if [ "$RESPONSE" -eq 200 ]; then
              echo "<p>Success calling backend! HTTP $RESPONSE</p>" >> /var/www/html/index.html
              echo "<p>Database Message: $DB_RESULT</p>" >> /var/www/html/index.html
            else
              echo "<p>Failed to call backend: HTTP $RESPONSE</p>" >> /var/www/html/index.html
            fi

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref WebSubnetList
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MinSize: 3
      MaxSize: 3
      DesiredCapacity: 3
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref WebTargetGroup
      Tags:
        - Key: Name
          Value: "Production-WebInstance"
          PropagateAtLaunch: true

  WebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "Production-WebALB"
      Subnets: !Ref WebSubnetList
      SecurityGroups:
        - !Ref WebALBSecurityGroup
      Scheme: internet-facing
      Type: application

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "Production-WebTG"
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"

  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
